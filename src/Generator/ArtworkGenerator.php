<?php

namespace App\Generator;

use App\Builder\SkyscraperCommandDirector;
use App\Command\CommandNamespace;
use App\FolderNames;
use App\Model\Artwork;
use App\Provider\PathProvider;
use App\Translator\ArtworkTranslator;
use App\Util\Finder;
use App\Util\Path;
use Monolog\Attribute\WithMonologChannel;
use Psr\Log\LoggerInterface;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Process\Process;

#[WithMonologChannel('skyscraper')]
readonly class ArtworkGenerator
{
    public function __construct(
        private SkyscraperCommandDirector $skyscraperCommandDirector,
        private ArtworkTranslator $artworkTranslator,
        private GameDescriptionGenerator $gameDescriptionGenerator,
        private PathProvider $pathProvider,
        private LoggerInterface $logger,
        private Path $path,
        private SkippedRomImportDataGenerator $skippedRomImportDataGenerator,
    ) {
    }

    public function generateRomArtwork(
        Artwork $artwork,
        string $platform,
        array $runtimeTranslationTokens,
        string $romAbsolutePath,
        bool $generateDescriptions,
        bool $forcePortmaster
    ): void {
        if (count($runtimeTranslationTokens) > 0) {
            $this->artworkTranslator->addRuntimeTranslationTokens($runtimeTranslationTokens);
        }

        $tempArtworkPath = $this->getTmpArtworkPath(
            $artwork,
            $platform,
            $romAbsolutePath,
            $this->pathProvider->removeRomFolderBase(dirname($romAbsolutePath)),
            CommandNamespace::ARTWORK
        );

        $command = $this->skyscraperCommandDirector->getRomBoxartGenerateCommand(
            $tempArtworkPath,
            $platform,
            $romAbsolutePath,
            $forcePortmaster ? CommandNamespace::PORTMASTER : CommandNamespace::ARTWORK
        );

        $this->logger->debug(
            sprintf('Running skyscraper command "%s"', implode(' ', $command))
        );

        $process = new Process($command);
        $process->setTimeout(60 * 60 * 3);

        try {
            $process->run();

            $output = $process->getOutput();
            $this->logger->info($output);
            if (!$process->isSuccessful()) {
                throw new \RuntimeException(sprintf('The artwork generation process failed. Check `%s`', $this->pathProvider->getLogPath('skyscraper')));
            }
        } catch (\Exception $e) {
            $this->logger->error($e->getMessage());
            throw new \RuntimeException(sprintf('The artwork generation process failed. Check `%s`', $this->pathProvider->getLogPath('skyscraper')));
        }

        $this->createNullImageIfAssetNotCreated($romAbsolutePath, $forcePortmaster ? CommandNamespace::PORTMASTER : CommandNamespace::ARTWORK);

        if ($generateDescriptions) {
            $this->gameDescriptionGenerator->generateGameDescriptions(
                $this->pathProvider->removeRomFolderBase(dirname($romAbsolutePath))
            );

            $this->skippedRomImportDataGenerator->generate($romAbsolutePath);
        }

        // this hack required to wipe out skipped cache files for subsequent runs
        // these are generated by post process process which skips the above 'generate' but
        // still generates the underlying skipped-* files
        if (!$generateDescriptions) {
            $this->skippedRomImportDataGenerator->deleteSkippedCacheFiles();
        }
    }

    public function generateFolderArtwork(
        Artwork $artwork,
        string $platform,
        array $runtimeTranslationTokens,
        string $romAbsolutePath,
        string $folderName
    ): void {
        if (count($runtimeTranslationTokens) > 0) {
            $this->artworkTranslator->addRuntimeTranslationTokens($runtimeTranslationTokens);
        }

        $tempArtworkPath = $this->getTmpArtworkPath(
            $artwork,
            $platform,
            $romAbsolutePath,
            $folderName,
            CommandNamespace::FOLDER
        );

        $command = $this->skyscraperCommandDirector->getRomBoxartGenerateCommand(
            $tempArtworkPath,
            $platform,
            $romAbsolutePath,
            CommandNamespace::FOLDER
        );

        $this->logger->debug(
            sprintf('Running skyscraper command "%s"', implode(' ', $command))
        );

        $process = new Process($command);
        $process->setTimeout(60 * 60 * 3);

        try {
            $process->run();

            $output = $process->getOutput();
            $this->logger->info($output);
            if (!$process->isSuccessful()) {
                throw new \RuntimeException(sprintf('The artwork generation process failed. Check `%s`', $this->pathProvider->getLogPath('skyscraper')));
            }
        } catch (\Exception $e) {
            $this->logger->error($e->getMessage());
            throw new \RuntimeException(sprintf('The artwork generation process failed. Check `%s`', $this->pathProvider->getLogPath('skyscraper')));
        }

        $this->createNullImageIfAssetNotCreated($romAbsolutePath, CommandNamespace::FOLDER);

        $filesystem = new Filesystem();

        $base = $this->pathProvider->getOutputPathForGeneratedArtwork('Folder');
        $romName = Path::removeExtension(basename($romAbsolutePath));

        $finder = new Finder();

        $finder->in($base)->files()
            ->exactName(sprintf('%s.png', $romName))
            ->exactName(sprintf('%s.txt', $romName));

        foreach ($finder as $file) {
            // This line will amend $folderNames like /SFC/MoreRoms/EvenMoreRoms to EvenMoreRoms
            // I'm not sure how MUOS handles 'Folder' boxart for identical named folders, but it's possible subfolders
            // with a same leaf name will clash
            $folderName = basename($folderName);

            $filesystem->rename(
                $file->getRealPath(),
                Path::join($file->getPath(), $folderName.'.png')
            );
        }
    }

    private function getTmpArtworkPath(
        Artwork $artwork,
        string $platform,
        string $romAbsolutePath,
        string $folderName,
        CommandNamespace $namespace
    ): string {
        $filesystem = new Filesystem();
        $romName = Path::removeExtension(basename($romAbsolutePath));

        $tempArtworkPath = $this->path->joinWithBase(
            FolderNames::TEMP->value,
            'artwork_tmp',
            sprintf('%s-%s-%s-%s.xml', $platform, $romName, Path::pathToDash($folderName), $namespace->value)
        );

        if ($filesystem->exists($tempArtworkPath)) {
            return $tempArtworkPath;
        }

        $artworkTranslated = $this->artworkTranslator->translateArtwork(
            $artwork,
            $platform,
            $romAbsolutePath,
            $folderName,
            $namespace
        );

        $filesystem->appendToFile(
            $tempArtworkPath,
            $artworkTranslated
        );

        return $tempArtworkPath;
    }

    private function createNullImageIfAssetNotCreated(string $absoluteRomPath, CommandNamespace $namespace): void
    {
        $filesystem = new Filesystem();
        $outFolder = $this->pathProvider->getOutputPathForGeneratedArtworkForNamespace($absoluteRomPath, $namespace);
        $expected = Path::join($outFolder, 'covers', Path::removeExtension(basename($absoluteRomPath)).'.png');

        if ($filesystem->exists($expected)) {
            return;
        }

        $this->logger->debug(sprintf('Artwork was not generated for input `%s`, using a blank image instead', $absoluteRomPath));
        $nullImage = $this->path->joinWithBase('resources', 'null.png');
        $filesystem->copy($nullImage, $expected);
    }
}
