<?php

namespace App\Config\Definition;

use Symfony\Component\Config\Definition\Builder\TreeBuilder;
use Symfony\Component\Config\Definition\ConfigurationInterface;

class ApplicationConfiguration implements ConfigurationInterface
{
    public function getConfigTreeBuilder(): TreeBuilder
    {
        $treeBuilder = new TreeBuilder('application');

        $root = $treeBuilder->getRootNode();

        $root
            ->children()
                ->scalarNode('rom_folder')
                    ->isRequired()
                    ->treatNullLike('~/roms')
                ->end()
                ->scalarNode('romset_name')
                    ->cannotBeEmpty()
                    ->treatNullLike('custom')
                ->end()
                ->scalarNode('screenscraper_user')
                    ->isRequired()
                    ->cannotBeEmpty()
                ->end()
                ->scalarNode('screenscraper_pass')
                    ->isRequired()
                    ->cannotBeEmpty()
                ->end()
                ->arrayNode('optimize')
                    ->addDefaultsIfNotSet()
                    ->children()
                        ->booleanNode('enabled')
                            ->defaultValue(false)
                        ->end()
                        ->booleanNode('convert_to_jpg')
                            ->defaultValue(false)
                        ->end()
                        ->integerNode('jpg_quality')
                            ->min(1)
                            ->max(100)
                            ->defaultValue(85)
                        ->end()
                    ->end()
                ->end()
                ->scalarNode('skyscraper_config_folder_path')
                    ->defaultValue('~/.skyscraper')
                    ->validate()->ifNull()->then(function () { return '~/.skyscraper'; })->end()
                ->end()
                ->scalarNode('skyscraper_cache_folder_path')
                    ->defaultValue('~/.skyscraper/cache')
                    ->validate()->ifNull()->then(function () { return '~/.skyscraper/cache'; })->end()
                ->end()
                ->arrayNode('preview')
                    ->addDefaultsIfNotSet()
                    ->children()
                        ->enumNode('type')
                            ->values(['static', 'animated', 'both', 'none'])
                            ->defaultValue('none')
                            ->isRequired()
                        ->end()
                        ->integerNode('animation_frames')
                            ->min(0)
                            ->defaultValue(100)
                        ->end()
                        ->enumNode('animation_format')
                            ->values(['webp', 'webm', 'apng'])
                            ->defaultValue('webp')
                        ->end()
                        ->integerNode('grid_size')
                            ->min(0)
                            ->defaultValue(3)
                        ->end()
                        ->arrayNode('theme')
                            ->scalarPrototype()->end()
                        ->end()
                        ->booleanNode('copy_back')
                            ->defaultFalse()
                        ->end()
                    ->end()
                ->end()
                ->variableNode('portmaster_alternates')->end()
                ->arrayNode('sftp')
                    ->children()
                        ->scalarNode('ip')->end()
                        ->scalarNode('port')
                            ->defaultValue('2022')
                            ->treatNullLike('2022')
                        ->end()
                        ->scalarNode('user')
                            ->defaultValue('muos')
                            ->treatNullLike('muos')
                        ->end()
                        ->scalarNode('pass')
                            ->defaultValue('muos')
                            ->treatNullLike('muos')
                        ->end()
                    ->end()
                ->end()
                ->arrayNode('folders')
                    ->normalizeKeys(false)
                    ->isRequired()
                    ->scalarPrototype()
                        ->validate()
                        ->ifEmpty()
                        ->thenUnset()
                        ->end()
                    ->end()
                ->end()
                ->arrayNode('package')
                    ->isRequired()
                    ->requiresAtLeastOneElement()
                    ->normalizeKeys(false)
                    ->scalarPrototype()
                        ->validate()
                        ->ifEmpty()
                        ->thenUnset()
                        ->end()
                    ->end()
                ->end()
                ->arrayNode('folder_roms')
                    ->isRequired()
                    ->scalarPrototype()
                        ->validate()
                        ->ifEmpty()
                        ->thenUnset()
                        ->end()
                    ->end()
                ->end()
                ->arrayNode('portmaster')
                    ->scalarPrototype()
                        ->validate()
                        ->ifEmpty()
                        ->thenUnset()
                        ->end()
                    ->end()
                ->end()
                ->booleanNode('portmaster_generate_all')
                    ->defaultFalse()
                ->end()
                ->integerNode('scrape_threads')
                    ->defaultValue(1)
                ->end()
            ->end();

        return $treeBuilder;
    }
}
